################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file build_helper.spgw
# brief
# author Laurent Thomas, Lionel GAUTHIER
#
#######################################

GREEN='\033[0;32m'   # ANSI color code for green
RED='\033[0;31m'     # ANSI color code for red
YELLOW='\033[1;93m'  # ANSI color code for brighten yellow
NC='\033[0m'         # ANSI color code to reset to default



################################
# include helper functions
################################
SCRIPT=$(readlink -f ${BASH_SOURCE})
THIS_SCRIPT_PATH=`dirname $SCRIPT`
source $THIS_SCRIPT_PATH/../common-build/installation/build_helper
source $THIS_SCRIPT_PATH/../common-build/installation/build_helper.fb_folly
source $THIS_SCRIPT_PATH/../common-build/installation/build_helper.fmt
source $THIS_SCRIPT_PATH/../common-build/installation/build_helper.spdlog
source $THIS_SCRIPT_PATH/../common-build/installation/build_helper.yamlcpp
source $THIS_SCRIPT_PATH/../common-build/installation/build_helper.nlohmann
source $THIS_SCRIPT_PATH/../common-build/installation/build_helper.cpr

CONFIG_FILE=$THIS_SCRIPT_PATH/../../etc/config.yaml
# Get the kernel version
KERNEL_VERSION=$(uname -r | cut -d'-' -f1,2 | cut -d'.' -f1,2)
# The validated kernel versions for bpf-tool are between 5.7 and 5.15
MAJOR_VERSION=`echo $KERNEL_VERSION | cut -d'.' -f1,1`
MINOR_VERSION=`echo $KERNEL_VERSION | cut -d'.' -f2,2`
if [[ $MAJOR_VERSION -lt 5 ]]; then
  KERNEL_VERSION=5.7
elif [[ $MAJOR_VERSION -gt 5 ]]; then
  KERNEL_VERSION=5.15
elif [[ $MAJOR_VERSION -eq 5 ]]; then
  if [[ $MINOR_VERSION -lt 7 ]]; then
    KERNEL_VERSION=5.7
  elif [[ $MINOR_VERSION -gt 15 ]]; then
    KERNEL_VERSION=5.15
  fi
fi



#-------------------------------------------------------------------------------
install_libbpf_from_git() {
  echo "Install libbpf from source"
  echo ""
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install libbpf ? <y/N> " prompt
    OPTION=""
  else
    prompt='y'
    OPTION="-y"
  fi
  if [ $2 -eq 0 ]; then
    debug=0
  else
    debug=1
  fi

  if [[ $prompt =~ [yY](es)* ]]
  then
    GIT_URL=https://github.com/libbpf/libbpf.git
    echo "Install libbpf from $GIT_URL"
    pushd $OPENAIRCN_DIR/build/ext
    echo "Downloading libbpf"
    if [[ $OPTION =~ -[yY](es)* ]]
    then
      $SUDO rm -rf libbpf
    fi

    git clone $GIT_URL
    if [[ $OS_DISTRO == "ubuntu" ]]; then
      PACKAGE_LIST="\
        make \
        clang \
        $CMAKE \
        binutils-dev \
        libbpf-dev \
        libelf-dev \
        libcap-dev \
        libpcap-dev \
        zlib1g-dev \
        llvm \
        python3-docutils"
    elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
      PACKAGE_LIST="\
        make \
        clang \
        $CMAKE \
        binutils-devel \
        libpfm-devel \
        elfutils-devel \
        libpcap \
        zlib-devel \
        llvm \
        python3"
    fi
    $SUDO $INSTALLER install -y $PACKAGE_LIST
    cd libbpf
    # we used to checkout to 051a4009f94d5633a8f734ca4235f0a78ee90469 (aka v0.3)
    # that was restricting us to build on 5.1xx kernel hosts
    # we are now back on the master branch (latest tag at time of writing is v1.4.5)
    # displaying the last commit version
    git log -n1
    ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
    cd src && make -j $(nproc)
    ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
    $SUDO make install
    ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
    popd
  fi
  echo "libbpf installation complete"
  return 0
}


#-------------------------------------------------------------------------------
check_enable_bpf_datapath() {
  # Parse the YAML Config file and check if enable_bpf_datapath is set to yes
  enable_bpf_datapath=$(grep -A 3 "upf:" $CONFIG_FILE | grep "enable_bpf_datapath:" | awk '{print $2}')
  if [ "$enable_bpf_datapath" == "yes" ]; then
    return 0
  else
    return 1
  fi
}


#-------------------------------------------------------------------------------
check_enable_qos() {
  # Parse the YAML Config file and check if enable_qos is set to yes
  enable_qos=$(grep -A 3 "upf:" $CONFIG_FILE | grep "enable_qos:" | awk '{print $2}')
  if [ "$enable_qos" == "yes" ]; then
    return 0
  else
    return 1
  fi
}


#-------------------------------------------------------------------------------
install_netlink_libraries() {
  echo ""
  echo "Install Netlink libraries:"
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    $SUDO $INSTALLER install -y libnl-3-dev libnl-genl-3-dev libnl-route-3-dev libnl-nf-3-dev
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    $SUDO $INSTALLER install -y libnl3-devel libnl3-cli
  fi
}


#-------------------------------------------------------------------------------
install_bpftool_from_git() {
  echo "Install bpftool from source"
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install bpftool ? <y/N> " prompt
    OPTION=""
  else
    prompt='y'
    OPTION="-y"
  fi
  if [ $2 -eq 0 ]; then
    debug=0
  else
    debug=1
  fi

  # Trick for building on Openshift build: don't build, recover a pre-built version
  #
  if [ -f $OPENAIRCN_DIR/build/ext/bpftool-5-14.tar.gz ]; then
    pushd /
    gzip -cd $OPENAIRCN_DIR/build/ext/bpftool-5-14.tar.gz | $SUDO tar -xvf -
    $SUDO chmod +x /usr/local/sbin/bpftool
    echo "bpftool installation complete"
    popd
    return 0
  fi

  if [[ $prompt =~ [yY](es)* ]]
  then
    GIT_URL=https://github.com/libbpf/bpftool.git
    echo "Install bpftool from $GIT_URL"
    pushd $OPENAIRCN_DIR/build/ext
    echo "Downloading bpftool"
    if [[ $OPTION =~ -[yY](es)* ]]
    then
      $SUDO rm -rf bpftool
    fi

    # Checkout to tested version
    git clone --branch v7.3.0 --recurse-submodules $GIT_URL

    if [[ $OS_DISTRO == "ubuntu" ]]; then
      $SUDO $INSTALLER install -y wget gcc-multilib
    elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
      $SUDO $INSTALLER install -y wget
    fi

    cd bpftool
    ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
    cd src && CLANG=Nope make -j $(nproc)
    ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
    $SUDO make install
    ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
    popd
  fi
  echo "bpftool installation complete"
  return 0
}


#-------------------------------------------------------------------------------
#arg1 is force (0 or 1) (no interactive script)
#arg2 is debug (0 or 1) (install debug libraries)
check_install_upf_deps() {

  if [ $1 -gt 0 ]; then
    OPTION="-y"
  else
    OPTION=""
  fi
  if [ $2 -eq 0 ]; then
    debug=0
  else
    debug=1
  fi

  echo "Check supported distribution"
  check_supported_distribution
  [[ $? -ne 0 ]] && return $?

  # prevent lock on /var/lib/dpkg/lock
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    #$SUDO systemctl mask apt-daily.service
    #$SUDO systemctl mask apt-daily.timer
    #$SUDO systemctl mask apt-daily-upgrade.service
    #$SUDO systemctl mask apt-daily-upgrade.timer
    if [ $IS_CONTAINER -eq 0 ]; then
      $SUDO sed -i 's/1/0/g' /etc/apt/apt.conf.d/10periodic
    fi
  fi

  update_package_db

  check_enable_epel_repos

  # Compilers, generators, ...
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      build-essential \
      $CMAKE \
      gcc-multilib \
      git"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      gcc-c++ \
      gcc-toolset-12 \
      $CMAKE \
      make \
      git"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install build tools"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  # Libraries
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
      "ubuntu20.04")
        specific_packages="libconfig++-dev libasio-dev libboost-all-dev libasan5"
        ;;
      *)
        specific_packages="libconfig++-dev libasio-dev libboost-all-dev libasan?"
        ;;
    esac
    # removed libspdlog-dev
    PACKAGE_LIST="\
      $specific_packages \
      libcurl4 \
      libcurl4-gnutls-dev \
      libevent-dev \
      libgmp-dev \
      libhogweed? \
      libidn2-0-dev \
      libidn11-dev \
      libssl-dev \
      libtool \
      openssl \
      nettle-dev \
      net-tools \
      pkg-config \
      ninja-build"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      boost-devel \
      libconfig-devel \
      libgcrypt-devel \
      gmp-devel \
      libidn-devel \
      openssl-devel \
      libtool \
      openssl \
      check \
      nettle-devel \
      libcurl-devel \
      glibc-devel \
      glibc-devel.i686 \
      pkgconfig \
      ninja-build \
      libasan"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install distro libs"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  echo_info "distro libs installation complete"

  echo ""
  echo "Auto-detecting UPF features:"
  check_enable_bpf_datapath
  if [ $? -eq 0 ]; then
    check_enable_qos
    if [ $? -eq 0 ]; then
      echo -e "     BPF Datapath: [$GREEN on $NC  ]"
      echo -e "      QoS Feature: [$GREEN on $NC  ]"
      echo ""
    else
      echo -e "     BPF Datapath: [$GREEN on $NC  ]"
      echo -e "      QoS Feature: [$RED off $NC ]"
      echo ""
    fi
  else
    echo -e "     BPF Datapath: [$RED off $NC ]"
    echo -e "      QoS Feature: [$RED off $NC ]"
    echo ""
  fi

  echo -e "$YELLOW WARNINGS: "
  echo -e "           1. Even when "BPF Datapath" and/or "QoS Feature" are/is disabled"
  echo -e "              we still build and install BPF and Netlinks libraries."
  echo -e "              The purpose is to have one-time UPF build process with all these libs"
  echo -e "              built and linked to the project. Thie difference would be on the"
  echo -e "              execution path, which depends on enabling or disabling these features."
  echo ""
  echo -e "           2. The QoS Feature is only available for the BPF Datapath mode, "
  echo -e "              so not usable for the Simple Switch mode. This is due to the "
  echo -e "              use of eBPF TC programming for qdisc filtering and classifying. $NC"
  echo ""

  install_libbpf_from_git $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  echo ""
  install_bpftool_from_git $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  echo ""
  install_netlink_libraries $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  install_fb_folly_from_source $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  install_fmt_from_git $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  install_spdlog_from_git $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  install_nlohmann_from_git $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  install_cpr_from_git $1 $2
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  # latest usage of yaml-cpp suggests that we should be using 0.7+ version
  # To be sure, let's install from source all the time for the moment
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
      "ubuntu20.04")
        # definitely, 0.6.2 as PPA installed is not enough
        install_libyaml_cpp_from_git $1 $2
        ret=$?;[[ $ret -ne 0 ]] && return $ret
        ;;
      "ubuntu22.04")
        # not sure about 0.7.0
        #$SUDO $INSTALLER install $OPTION libyaml-cpp0.7 libyaml-cpp-dev
        install_libyaml_cpp_from_git $1 $2
        ret=$?;[[ $ret -ne 0 ]] && return $ret
        ;;
    esac
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    # definitely, 0.6.2 as PPA installed is not enough
    # $SUDO $INSTALLER install $OPTION yaml-cpp yaml-cpp-devel
    install_libyaml_cpp_from_git $1 $2
    ret=$?;[[ $ret -ne 0 ]] && return $ret
  fi

  if [[ $IS_CONTAINER -eq 1 ]] && [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    echo "Changing gcc/g++ version to 12"
    mv /usr/bin/g++ /usr/bin/g++-11
    mv /usr/bin/gcc /usr/bin/gcc-11
    mv /usr/bin/c++ /usr/bin/c++-11
    update-alternatives --install /usr/bin/gcc gcc /opt/rh/gcc-toolset-12/root/bin/gcc 20
    update-alternatives --install /usr/bin/g++ g++ /opt/rh/gcc-toolset-12/root/bin/g++ 20
    update-alternatives --install /usr/bin/c++ c++ /opt/rh/gcc-toolset-12/root/bin/c++ 20
  fi

  $SUDO ldconfig

  return 0
}
#-------------------------------------------------------------------------------
#arg1 is force (0 or 1) (no interactive script)
#arg2 is debug (0 or 1) (install debug libraries)
check_install_upf_min_deps() {

  if [ $1 -gt 0 ]; then
    OPTION="-y"
  else
    OPTION=""
  fi

  echo "Check supported distribution"
  check_supported_distribution
  [[ $? -ne 0 ]] && return $?

  # prevent lock on /var/lib/dpkg/lock
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    #$SUDO systemctl mask apt-daily.service
    #$SUDO systemctl mask apt-daily.timer
    #$SUDO systemctl mask apt-daily-upgrade.service
    #$SUDO systemctl mask apt-daily-upgrade.timer
    $SUDO sed -i 's/1/0/g' /etc/apt/apt.conf.d/10periodic
  fi

  update_package_db

  check_enable_epel_repos

  # Compilers, generators, ...
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    PACKAGE_LIST="\
      gdb "
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      gdb "
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install build tools"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret


  # Networking
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
  "ubuntu18.04")
      specific_packages="iproute2"
      ;;
    esac
    PACKAGE_LIST="\
      $specific_packages \
      ethtool \
      iptables \
      vlan"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      ethtool \
      iproute \
      vconfig"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install networking tools"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  return 0
}
