#ifndef __QER_TC_USER_H__
#define __QER_TC_USER_H__

#include <ProgramLifeCycle.hpp>
#include <atomic>
#include <linux/bpf.h>  // manage maps (e.g. bpf_update*)
#include <memory>
#include <mutex>
#include <signal.h>  // signals
#include <qer_tc_kernel_skel.h>
#include <wrappers/BPFMap.hpp>
#include <BPFProgram.h>
#include "interfaces.h"

#include <netlink/netlink.h>
#include <netlink/route/qdisc.h>
#include <qos_flow.h>
#include <pfcp_session.hpp>
class BPFMaps;
class BPFMap;
class SessionManager;
// class RulesUtilities;

using QERProgramLifeCycle = ProgramLifeCycle<qer_tc_kernel_c>;

/**
 * @brief Singleton class to abstract the UPF bpf tc program.
 */
class QERProgram : public BPFProgram {
 public:
  /*---------------------------------------------------------------------------------------------------------------*/
  /**
   * @brief Construct a new QERProgram object.
   *
   */
  explicit QERProgram();

  /*---------------------------------------------------------------------------------------------------------------*/
  /**
   * @brief Destroy the QERProgram object
   */
  virtual ~QERProgram();

  /*---------------------------------------------------------------------------------------------------------------*/
  /**
   * @brief Setup the tc BPF program when QoS Feature is disabled
   *
   */
  void setup();

  /*---------------------------------------------------------------------------------------------------------------*/
  /**
   * @brief Setup tc BPF program when QoS Feature is enabled
   *
   * @param const std::string&
   * @param const std::string&
   * @param const char*
   * @param std::vector<struct s_fiveQosFlow*>
   * @param uint64_t
   * @param struct gtpUTunnel*
   */
  void setup(uint64_t seid, std::vector<std::shared_ptr<pfcp::pfcp_qer>> pQer);
  /*---------------------------------------------------------------------------------------------------------------*/
  /**
   * @brief Get the BPFMaps object.
   *
   * @return std::shared_ptr<BPFMaps> The reference of the BPFMaps.
   */
  std::shared_ptr<BPFMaps> getMaps();

  /*---------------------------------------------------------------------------------------------------------------*/
  /**
   * @brief Tear downs the BPF program.
   *
   */
  void tearDown();

  /*---------------------------------------------------------------------------------------------------------------*/

  std::shared_ptr<BPFMap> getEgressIfindexMap() const;

  /*---------------------------------------------------------------------------------------------------------------*/
  /**
   * @brief Get the n3 GTP-U Tunnel Map object.
   *
   * @return std::shared_ptr<BPFMap>  The seid value of the PDU session
   * associated with the n3 GTP-U Tunnel.
   */
  std::shared_ptr<BPFMap> geGtpUTunnelMap() const;

  std::shared_ptr<BPFMap> getSdfFilterMap() const;

  /*---------------------------------------------------------------------------------------------------------------*/
  std::shared_ptr<BPFMap> get5GQoSFlowParamsMap() const;

  /*---------------------------------------------------------------------------------------------------------------*/

  std::shared_ptr<BPFMap> getQoSFlowMap() const;

  /*---------------------------------------------------------------------------------------------------------------*/

  //   struct qer_tc_kernel_c* get_bpf_skel_object();
  //   int teardown_hook(int ifindex);
  //   int tc_detach_egress(int ifindex);
  //   int tc_attach_egress(
  //       int ifindex, struct qer_tc_kernel_c* obj, const char* section_name);
  //   int tc_attach_ingress(
  //       int ifindex, struct qer_tc_kernel_c* obj, const char* section_name);
  //   int add_clsact_qdisc(int ifindex, enum bpf_tc_attach_point attach_point);

  bool no_htb_root_qdisc(std::string interface);
  /*---------------------------------------------------------------------------------------------------------------*/
 private:
  /**
   * @brief Initialize BPF wrappers maps.
   *
   */
  void initializeMaps();

  void storeQosFlow(std::shared_ptr<pfcp::pfcp_qer> pQer);
  /*---------------------------------------------------------------------------------------------------------------*/
  // The reference of the bpf maps.
  std::shared_ptr<BPFMaps> mpMaps;

  /*---------------------------------------------------------------------------------------------------------------*/
  // The skeleton of the UPF program generated by bpftool.
  // ProgramLifeCycle is the owner of the pointer.
  qer_tc_kernel_c* spSkeleton;

  /*---------------------------------------------------------------------------------------------------------------*/
  std::shared_ptr<BPFMap> mpEgressIfindexMap;

  /*---------------------------------------------------------------------------------------------------------------*/

  // The BPF lifecycle program.
  std::shared_ptr<QERProgramLifeCycle> mpLifeCycle;

  /*---------------------------------------------------------------------------------------------------------------*/
  // The SDF Filter map.
  std::shared_ptr<BPFMap> mpSdfFilterMap;

  /*---------------------------------------------------------------------------------------------------------------*/
  // The 5G QoS Flow Parameters map.
  std::shared_ptr<BPFMap> mp5GQoSFlowParamsMap;

  /*---------------------------------------------------------------------------------------------------------------*/
  // The 5G QoS Flow.
  std::shared_ptr<BPFMap> mpQoSFlowMap;

  /*---------------------------------------------------------------------------------------------------------------*/
  std::vector<struct s_fiveQosFlow> qosFlowsQfis;
};

#endif  // __QER_TC_USER_H__
