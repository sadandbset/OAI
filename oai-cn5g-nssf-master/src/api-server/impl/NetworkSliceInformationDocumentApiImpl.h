/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * NetworkSliceInformationDocumentApiImpl.h
 *
 *
 */

#ifndef NETWORK_SLICE_INFORMATION_DOCUMENT_API_IMPL_H_
#define NETWORK_SLICE_INFORMATION_DOCUMENT_API_IMPL_H_

#include <memory>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <NetworkSliceInformationDocumentApi.h>

#include <pistache/optional.h>

#include "AuthorizedNetworkSliceInfo.h"
#include "NFType.h"
#include "PlmnId.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include "SliceInfoForPDUSession.h"
#include "SliceInfoForRegistration.h"
#include "SliceInfoForUEConfigurationUpdate.h"
#include "nssf_app.hpp"

#include "Tai.h"
#include <string>

namespace oai {
namespace nssf_server {
namespace api {

class NetworkSliceInformationDocumentApiImpl
    : public oai::nssf_server::api::NetworkSliceInformationDocumentApi {
 public:
  NetworkSliceInformationDocumentApiImpl(
      std::shared_ptr<Pistache::Rest::Router>, nssf::nssf_app* nssf_app_inst,
      std::string address);
  ~NetworkSliceInformationDocumentApiImpl() {}

  void n_s_selection_get(
      const Pistache::Optional<oai::model::common::NFType>& nfType,
      const Pistache::Optional<std::string>& nfId,
      const Pistache::Optional<
          oai::nssf_server::model::SliceInfoForRegistration>&
          sliceInfoRequestForRegistration,
      const Pistache::Optional<oai::nssf_server::model::SliceInfoForPDUSession>&
          sliceInfoRequestForPduSession,
      const Pistache::Optional<
          oai::nssf_server::model::SliceInfoForUEConfigurationUpdate>&
          sliceInfoRequestForUeCu,
      const Pistache::Optional<oai::model::common::PlmnId>& homePlmnId,
      const Pistache::Optional<oai::model::common::Tai>& tai,
      const Pistache::Optional<std::string>& supportedFeatures,
      Pistache::Http::ResponseWriter& response);

 private:
  nssf::nssf_app* m_nssf_app;
  std::string m_address;
};

}  // namespace api
}  // namespace nssf_server
}  // namespace oai

#endif
